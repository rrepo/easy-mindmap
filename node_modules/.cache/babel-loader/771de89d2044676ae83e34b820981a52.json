{"ast":null,"code":"var AND_REGEXP = /^\\s+and\\s+(.*)/i;\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i;\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) return [array];\n  return array.reduce(function (a, b) {\n    return a.concat(flatten(b));\n  }, []);\n}\n\nfunction find(string, predicate) {\n  for (var n = 1, max = string.length; n <= max; n++) {\n    var parsed = string.substr(-n, n);\n\n    if (predicate(parsed, n, max)) {\n      return string.slice(0, -n);\n    }\n  }\n\n  return '';\n}\n\nfunction matchQuery(all, query) {\n  var node = {\n    query: query\n  };\n\n  if (query.indexOf('not ') === 0) {\n    node.not = true;\n    query = query.slice(4);\n  }\n\n  for (var name in all) {\n    var type = all[name];\n    var match = query.match(type.regexp);\n\n    if (match) {\n      node.type = name;\n\n      for (var i = 0; i < type.matches.length; i++) {\n        node[type.matches[i]] = match[i + 1];\n      }\n\n      return node;\n    }\n  }\n\n  node.type = 'unknown';\n  return node;\n}\n\nfunction matchBlock(all, string, qs) {\n  var node;\n  return find(string, function (parsed, n, max) {\n    if (AND_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(AND_REGEXP)[1]);\n      node.compose = 'and';\n      qs.unshift(node);\n      return true;\n    } else if (OR_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(OR_REGEXP)[1]);\n      node.compose = 'or';\n      qs.unshift(node);\n      return true;\n    } else if (n === max) {\n      node = matchQuery(all, parsed.trim());\n      node.compose = 'or';\n      qs.unshift(node);\n      return true;\n    }\n\n    return false;\n  });\n}\n\nmodule.exports = function parse(all, queries) {\n  if (!Array.isArray(queries)) queries = [queries];\n  return flatten(queries.map(function (block) {\n    var qs = [];\n\n    do {\n      block = matchBlock(all, block, qs);\n    } while (block);\n\n    return qs;\n  }));\n};","map":{"version":3,"names":["AND_REGEXP","OR_REGEXP","flatten","array","Array","isArray","reduce","a","b","concat","find","string","predicate","n","max","length","parsed","substr","slice","matchQuery","all","query","node","indexOf","not","name","type","match","regexp","i","matches","matchBlock","qs","test","compose","unshift","trim","module","exports","parse","queries","map","block"],"sources":["C:/Users/tnazu/OneDrive/ドキュメント/coding/vue3/mindmap/node_modules/browserslist/parse.js"],"sourcesContent":["var AND_REGEXP = /^\\s+and\\s+(.*)/i\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) return [array]\n  return array.reduce(function (a, b) {\n    return a.concat(flatten(b))\n  }, [])\n}\n\nfunction find(string, predicate) {\n  for (var n = 1, max = string.length; n <= max; n++) {\n    var parsed = string.substr(-n, n)\n    if (predicate(parsed, n, max)) {\n      return string.slice(0, -n)\n    }\n  }\n  return ''\n}\n\nfunction matchQuery(all, query) {\n  var node = { query: query }\n  if (query.indexOf('not ') === 0) {\n    node.not = true\n    query = query.slice(4)\n  }\n\n  for (var name in all) {\n    var type = all[name]\n    var match = query.match(type.regexp)\n    if (match) {\n      node.type = name\n      for (var i = 0; i < type.matches.length; i++) {\n        node[type.matches[i]] = match[i + 1]\n      }\n      return node\n    }\n  }\n\n  node.type = 'unknown'\n  return node\n}\n\nfunction matchBlock(all, string, qs) {\n  var node\n  return find(string, function (parsed, n, max) {\n    if (AND_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(AND_REGEXP)[1])\n      node.compose = 'and'\n      qs.unshift(node)\n      return true\n    } else if (OR_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(OR_REGEXP)[1])\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    } else if (n === max) {\n      node = matchQuery(all, parsed.trim())\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    }\n    return false\n  })\n}\n\nmodule.exports = function parse(all, queries) {\n  if (!Array.isArray(queries)) queries = [queries]\n  return flatten(\n    queries.map(function (block) {\n      var qs = []\n      do {\n        block = matchBlock(all, block, qs)\n      } while (block)\n      return qs\n    })\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}