{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {{ alias: string|string[], extension: string }} ExtensionAliasOption */\n\n\nmodule.exports = class ExtensionAliasPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {ExtensionAliasOption} options options\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const {\n      extension,\n      alias\n    } = this.options;\n    resolver.getHook(this.source).tapAsync(\"ExtensionAliasPlugin\", (request, resolveContext, callback) => {\n      const requestPath = request.request;\n      if (!requestPath || !requestPath.endsWith(extension)) return callback();\n\n      const resolve = (alias, callback) => {\n        resolver.doResolve(target, { ...request,\n          request: `${requestPath.slice(0, -extension.length)}${alias}`,\n          fullySpecified: true\n        }, `aliased from extension alias with mapping '${extension}' to '${alias}'`, resolveContext, callback);\n      };\n\n      const stoppingCallback = (err, result) => {\n        if (err) return callback(err);\n        if (result) return callback(null, result); // Don't allow other aliasing or raw request\n\n        return callback(null, null);\n      };\n\n      if (typeof alias === \"string\") {\n        resolve(alias, stoppingCallback);\n      } else if (alias.length > 1) {\n        forEachBail(alias, resolve, stoppingCallback);\n      } else {\n        resolve(alias[0], stoppingCallback);\n      }\n    });\n  }\n\n};","map":{"version":3,"names":["forEachBail","require","module","exports","ExtensionAliasPlugin","constructor","source","options","target","apply","resolver","ensureHook","extension","alias","getHook","tapAsync","request","resolveContext","callback","requestPath","endsWith","resolve","doResolve","slice","length","fullySpecified","stoppingCallback","err","result"],"sources":["C:/Users/tnazu/OneDrive/ドキュメント/coding/vue3/mindmap/node_modules/enhanced-resolve/lib/ExtensionAliasPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {{ alias: string|string[], extension: string }} ExtensionAliasOption */\n\nmodule.exports = class ExtensionAliasPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {ExtensionAliasOption} options options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = options;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { extension, alias } = this.options;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ExtensionAliasPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst requestPath = request.request;\n\t\t\t\tif (!requestPath || !requestPath.endsWith(extension)) return callback();\n\t\t\t\tconst resolve = (alias, callback) => {\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\trequest: `${requestPath.slice(0, -extension.length)}${alias}`,\n\t\t\t\t\t\t\tfullySpecified: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t`aliased from extension alias with mapping '${extension}' to '${alias}'`,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst stoppingCallback = (err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t};\n\t\t\t\tif (typeof alias === \"string\") {\n\t\t\t\t\tresolve(alias, stoppingCallback);\n\t\t\t\t} else if (alias.length > 1) {\n\t\t\t\t\tforEachBail(alias, resolve, stoppingCallback);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(alias[0], stoppingCallback);\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;AAEA;;AACA;;AACA;;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,oBAAN,CAA2B;EAC3C;AACD;AACA;AACA;AACA;EACCC,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0B;IACpC,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACA,MAAM;MAAEI,SAAF;MAAaC;IAAb,IAAuB,KAAKN,OAAlC;IACAG,QAAQ,CACNI,OADF,CACU,KAAKR,MADf,EAEES,QAFF,CAEW,sBAFX,EAEmC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACxE,MAAMC,WAAW,GAAGH,OAAO,CAACA,OAA5B;MACA,IAAI,CAACG,WAAD,IAAgB,CAACA,WAAW,CAACC,QAAZ,CAAqBR,SAArB,CAArB,EAAsD,OAAOM,QAAQ,EAAf;;MACtD,MAAMG,OAAO,GAAG,CAACR,KAAD,EAAQK,QAAR,KAAqB;QACpCR,QAAQ,CAACY,SAAT,CACCd,MADD,EAEC,EACC,GAAGQ,OADJ;UAECA,OAAO,EAAG,GAAEG,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,CAACX,SAAS,CAACY,MAAhC,CAAwC,GAAEX,KAAM,EAF7D;UAGCY,cAAc,EAAE;QAHjB,CAFD,EAOE,8CAA6Cb,SAAU,SAAQC,KAAM,GAPvE,EAQCI,cARD,EASCC,QATD;MAWA,CAZD;;MAcA,MAAMQ,gBAAgB,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;QACzC,IAAID,GAAJ,EAAS,OAAOT,QAAQ,CAACS,GAAD,CAAf;QACT,IAAIC,MAAJ,EAAY,OAAOV,QAAQ,CAAC,IAAD,EAAOU,MAAP,CAAf,CAF6B,CAGzC;;QACA,OAAOV,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;MACA,CALD;;MAMA,IAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B;QAC9BQ,OAAO,CAACR,KAAD,EAAQa,gBAAR,CAAP;MACA,CAFD,MAEO,IAAIb,KAAK,CAACW,MAAN,GAAe,CAAnB,EAAsB;QAC5BxB,WAAW,CAACa,KAAD,EAAQQ,OAAR,EAAiBK,gBAAjB,CAAX;MACA,CAFM,MAEA;QACNL,OAAO,CAACR,KAAK,CAAC,CAAD,CAAN,EAAWa,gBAAX,CAAP;MACA;IACD,CAhCF;EAiCA;;AApD0C,CAA5C"},"metadata":{},"sourceType":"script"}